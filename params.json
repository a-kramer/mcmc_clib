{"name":"mcmc clib","tagline":"a c program for simplified manifold MALA sampling of ODE model parameters","body":"mcmc_clib\r\n=========\r\n\r\nis a C program for simplified manifold MALA sampling of ODE model parameters.\r\n\r\n\r\nInstallation Instructions\r\n=========================\r\n\r\ninstall the following dependencies (libraries)\r\n```\r\nExternal library dependencies\r\n\tFor ODE: \r\n\t\tSundials 2.4.0 or later\r\n\tFor MCMC:\r\n\t\tGSL\t1.15 or later\r\n\t\tCBLAS\r\n\r\nFor VFGEN:\r\n\tCLN 1.3.2 or later\r\n\tGiNaC 1.6.2 or later\r\n\tmini XML 2.6 or later\r\n```\r\nfor example, on ubuntu, you can install the following packages:\r\n\r\n    libmxml-dev \r\n    libmxml1 \r\n    libatlas-base-dev \r\n    libatlas3gf-base\r\n    libginac-dev \r\n    libcln-dev \r\n    libsundials-serial-dev \r\n    libsundials-cvode1\r\n    libsundials-cvodes2\r\n    libatlas-dev\r\n    libgsl0-dev\r\n\r\nto satisfy these dependencies. \r\n\r\ninspect the Makefile.\r\n\r\ntype\r\n```\r\nmake -B\r\n```\r\nnote that the option \"-B\" will compile everything, even if the\r\nbinaries appear up to date. It is not necessary once you have compiled\r\nthe binaries once for your architecture.\r\n\r\nUsage\r\n=====\r\n\r\n\t./ode_rmhmc_binary -l ./model_esens.so -c ./data.cfg -b -o sampleND.double -s ${sample_size} > ttr.out\r\n\r\n\t-b \r\n\t      switches output mode to binary, otherwise text mode (printf)\r\n\t      Burn-In Sample will always be printed to stdout\r\n\r\n\t-c data.cfg\r\n\t      configuration (data, reference data, inputs, output function, prior, etc.)\r\n\r\n\t-l ode_model.so\r\n\t      shared library file\r\n\r\n\t-s N\r\n              sample size, Burn-In will be $((sample_size/10))\r\n\r\n\t-h \r\n              prints help\r\n\r\n\r\nThe configuration file includes the measurement time specifications,\r\nthe data, the standard deviation of observations and the\r\nhyperparameters \\mu and \\Sigma^{-1} of the Gaussian prior.  Optionally\r\nsome of the sampling parameters can be set there for convenience.\r\n\r\nThe following Parameters can be set in the cfg file:\r\n\r\nProperty     |  Setting\r\n-----------: | :------------\r\nsample size  |  ```sample_size=[integer]```\r\nstep size    |  ```step_size=[double]```\r\ntarget acceptance | ```acceptance=[0, 1]```\r\nsample file name  | ```output=[string]```\r\ninitial condition time | ```t0=[double]```\r\n\r\nThese definitions should not have spaces before the '=' sign since\r\neverything before = is checked for matches with option names (i.e.  \r\n```« t0 »=0.0;``` is not the same as ```«t0»=0.0;``` ).\r\n\r\n\r\nHints\r\n=====\r\n\r\nit might be helpful to specify the sample size like this in bash: \r\n```\r\n   -s $((2**14))\r\n   -s $((10**6))\r\n```\r\nbecause ```1e6``` or ```1E6``` will not work. (the sample size is an integer).\r\n\r\n\r\n====================================================================================\r\n\r\nOutput of parameters sample {p} will have the following structure (in\r\nbinary and text mode; though, in binary mode there are no newlines):\r\n\r\nsampling is done in logarithmic space, so use exp(p[i]) if you want to simulate trajectories\r\n\r\ncolumns: parameters and log-posterior\r\n   rows: Markov Chain members (i.e. the sample members)\r\n```\r\n   Line \r\n   L1   p[0] p[1] p[2] ... p[n-1] log-Posterior {\\n}\r\n   L2   p[0] p[1] p[2] ... p[n-1] log-Posterior {\\n}\r\n   L3   p[0] p[1] p[2] ... p[n-1] log-Posterior {\\n}\r\n   L4   p[0] p[1] p[2] ... p[n-1] log-Posterior {\\n}\r\n   ...\r\n   L{sample_size}      ...\r\n```\r\nyou can load the binary sample using an fread type function.\r\n\r\ne.g. in octave: ```[VAL, COUNT] = fread (FID, SIZE, PRECISION,SKIP, ARCH)```\r\n\r\nso:\r\n```\r\n     FID=fopen(\"MySample.double\",\"r\");\r\n     sample=fread(FID,[n+1,sample_size],\"double\");\r\n     fclose(FID);\r\n```\r\nshould work fine. In fact, the sources include octave scripts that read and process the sample. \r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}